%function CGIRBlockRegisterFixPointFunctions() void
%if !ISFIELD(FixPtUtils,"look1_binlxpw")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_binlxpw",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
    real_T frac;
    real_T yL_0d0;
    uint32_T bpIdx;
    uint32_T iLeft;
    uint32_T iRght;
    /* Column-major Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear point-slope'
   Extrapolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /*@>5247a*/if (/*@>d021a*/u0/*@>d0218*/ <= /*@>d03f2*/bp0/*@>d047a*/[/*@>d025c*/0U]) {
        /*@>cff3b*/iLeft/*@>523ff*/ = /*@>cff3d*/0U;
        /*@>cff49*/frac/*@>52415*/ = (/*@>cff41*/u0/*@>52407*/ - /*@>d040d*/bp0/*@>d0480*/[/*@>cff40*/0U])/*@>52411*/ / (/*@>d0410*/bp0/*@>d0483*/[/*@>cff48*/1U]/*@>52410*/ - /*@>d0413*/bp0/*@>d0486*/[/*@>cff45*/0U]);
    } else /*@>52478*/if (/*@>d0220*/u0/*@>d021e*/ < /*@>d03f5*/bp0/*@>d047d*/[/*@>d0225*/maxIndex]) {
        /* Binary Search */
        /*@>cffa0*/bpIdx/*@>52500*/ = /*@>d0229*/maxIndex/*@>d0227*/ >> /*@>d022a*/1U;
        /*@>cffa2*/iLeft/*@>52504*/ = /*@>cffa4*/0U;
        /*@>cffa7*/iRght/*@>52509*/ = /*@>cffa5*/maxIndex;
        while/*@<52532*/ (/*@>cffa9*/iRght/*@>5250f*/ - /*@>cffab*/iLeft/*@>52511*/ > /*@>cffad*/1U) {
            /*@>52525*/if (/*@>d020a*/u0/*@>5251a*/ < /*@>d040a*/bp0/*@>d04a1*/[/*@>cffae*/bpIdx]) {
                /*@>cffb6*/iRght/*@>5251e*/ = /*@>cffb4*/bpIdx;
            } else {
                /*@>cffba*/iLeft/*@>52523*/ = /*@>cffb8*/bpIdx;
            }
            /*@>cffc0*/bpIdx/*@>5252f*/ = (/*@>cffbe*/iRght/*@>5252b*/ + /*@>cffbc*/iLeft)/*@>cfc97*/ >> /*@>cffcc*/1U;
        }
        /*@>cff66*/frac/*@>5244d*/ = (/*@>cff64*/u0/*@>52447*/ - /*@>d0401*/bp0/*@>d0498*/[/*@>d0204*/iLeft])/*@>52449*/ / (/*@>d0404*/bp0/*@>d049b*/[/*@>d0206*/iLeft/*@>52441*/ + /*@>cff61*/1U]/*@>52448*/ - /*@>d0407*/bp0/*@>d049e*/[/*@>d0208*/iLeft]);
    } else {
        /*@>cff6b*/iLeft/*@>52455*/ = /*@>cff68*/maxIndex/*@>52452*/ - /*@>cff6a*/1U;
        /*@>cff7d*/frac/*@>52472*/ = (/*@>cff72*/u0/*@>52460*/ - /*@>d03f8*/bp0/*@>d0489*/[/*@>cff6d*/maxIndex/*@>5245a*/ - /*@>cff6f*/1U])/*@>5246e*/ / (/*@>d03fb*/bp0/*@>d048c*/[/*@>cff79*/maxIndex]/*@>5246d*/ - /*@>d03fe*/bp0/*@>d048f*/[/*@>cff74*/maxIndex/*@>52464*/ - /*@>cff76*/1U]);
    }
    /* Column-major Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    /*@>cff92*/yL_0d0/*@>524cf*/ = /*@>d0416*/table/*@>d0492*/[/*@>d020e*/iLeft];
    return (/*@>d0419*/table/*@>d0495*/[/*@>d0231*/iLeft/*@>d022f*/ + /*@>d0232*/1U]/*@>524d9*/ - /*@>cff94*/yL_0d0)/*@>cfc92*/ * /*@>cff98*/frac/*@>524e2*/ + /*@>cff9a*/yL_0d0;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_binlxpw",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlxpw", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlxpw", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_binlxpw")


%if !ISFIELD(FixPtUtils,"look1_binlcpw")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_binlcpw",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern real_T look1_binlcpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
real_T look1_binlcpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
    real_T frac;
    real_T yL_0d0;
    uint32_T bpIdx;
    uint32_T iLeft;
    uint32_T iRght;
    /* Column-major Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear point-slope'
   Extrapolation method: 'Clip'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Clip'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /*@>525c8*/if (/*@>d02c2*/u0/*@>d02c0*/ <= /*@>d041f*/bp0/*@>d04a5*/[/*@>d0304*/0U]) {
        /*@>d0015*/iLeft/*@>52572*/ = /*@>d0017*/0U;
        /*@>d0018*/frac/*@>52579*/ = /*@>d001a*/0.0;
    } else /*@>525c6*/if (/*@>d02c8*/u0/*@>d02c6*/ < /*@>d0422*/bp0/*@>d04a8*/[/*@>d02cd*/maxIndex]) {
        /* Binary Search */
        /*@>d0061*/bpIdx/*@>52643*/ = /*@>d02d1*/maxIndex/*@>d02cf*/ >> /*@>d02d2*/1U;
        /*@>d0063*/iLeft/*@>52647*/ = /*@>d0065*/0U;
        /*@>d0068*/iRght/*@>5264c*/ = /*@>d0066*/maxIndex;
        while/*@<52675*/ (/*@>d006a*/iRght/*@>52652*/ - /*@>d006c*/iLeft/*@>52654*/ > /*@>d006e*/1U) {
            /*@>52668*/if (/*@>d02b2*/u0/*@>5265d*/ < /*@>d042e*/bp0/*@>d04ba*/[/*@>d006f*/bpIdx]) {
                /*@>d0077*/iRght/*@>52661*/ = /*@>d0075*/bpIdx;
            } else {
                /*@>d007b*/iLeft/*@>52666*/ = /*@>d0079*/bpIdx;
            }
            /*@>d0081*/bpIdx/*@>52672*/ = (/*@>d007f*/iRght/*@>5266e*/ + /*@>d007d*/iLeft)/*@>cfc9f*/ >> /*@>d008d*/1U;
        }
        /*@>d0036*/frac/*@>525b1*/ = (/*@>d0034*/u0/*@>525ab*/ - /*@>d0425*/bp0/*@>d04b1*/[/*@>d02ac*/iLeft])/*@>525ad*/ / (/*@>d0428*/bp0/*@>d04b4*/[/*@>d02ae*/iLeft/*@>525a5*/ + /*@>d0031*/1U]/*@>525ac*/ - /*@>d042b*/bp0/*@>d04b7*/[/*@>d02b0*/iLeft]);
    } else {
        /*@>d003b*/iLeft/*@>525b9*/ = /*@>d0038*/maxIndex/*@>525b6*/ - /*@>d003a*/1U;
        /*@>d003d*/frac/*@>525c0*/ = /*@>d003f*/1.0;
    }
    /* Column-major Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    /*@>d0053*/yL_0d0/*@>52612*/ = /*@>d0431*/table/*@>d04ab*/[/*@>d02b6*/iLeft];
    return (/*@>d0434*/table/*@>d04ae*/[/*@>d02d9*/iLeft/*@>d02d7*/ + /*@>d02da*/1U]/*@>5261c*/ - /*@>d0055*/yL_0d0)/*@>cfc9a*/ * /*@>d0059*/frac/*@>52625*/ + /*@>d005b*/yL_0d0;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_binlcpw",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlcpw", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_binlcpw", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_binlcpw")


%endfunction



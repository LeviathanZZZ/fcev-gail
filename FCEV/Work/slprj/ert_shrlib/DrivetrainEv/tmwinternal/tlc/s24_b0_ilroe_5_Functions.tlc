%implements s24_b0_ilroe_5_Functions "C"

%function DrivetrainEv_detectSlip_a_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T b_yn;
%assign _modelSS = ""

%assign   Outputs_open_detectSlip_8_1 = ""
%openfile Outputs_open_detectSlip_8_1

/* Outputs for Function Call SubSystem: '<S157>/detectSlip' */
%closefile Outputs_open_detectSlip_8_1

%assign    Outputs_body_detectSlip_8_1 = ""
%openfile  Outputs_body_detectSlip_8_1

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[4], "Output",0)
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectSlip",4,0)
%<SLibCG_AccessArg(5 ,0, 2)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectSlip",4,1)
%<SLibCG_AccessArg(5 ,0, 0)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectSlip",4,2)
%<SLibCG_AccessArg(5 ,0, 1)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectSlip",4,3)
%<SLibCG_AccessArg(5 ,0, 3)>
%endif

%<SLibCG_DumpSSCode("/*@[84845*/",SLibCGIRGenReusableSysCall("DrivetrainEv_detectSlip", ["/*@>84b3f*/%<::tSimStruct>", "Tout", "Tfmaxs", "&/*@>84b5f*/localB->/*@>84b5e*/RelationalOperator"], 4, 0, 6, 0, 6, 8),"/*@]*/")>\
%assign ss = ::CompiledModel.System[4]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif

%endif
%closefile Outputs_body_detectSlip_8_1

%assign    Outputs_close_detectSlip_8_1 = ""
%openfile  Outputs_close_detectSlip_8_1

/* End of Outputs for SubSystem: '<S157>/detectSlip' */
%closefile Outputs_close_detectSlip_8_1
%<SLibCG_DumpSSCode(Outputs_open_detectSlip_8_1, Outputs_body_detectSlip_8_1, Outputs_close_detectSlip_8_1)>

b_yn = localB->RelationalOperator;
return b_yn;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[5].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("DrivetrainEv_detectSlip_a", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "DrivetrainEv_detectSlip_a"))
%<SLibCG_AccessArg(5, 0, 2)>
%endif
%if SLibCG_ArgAccessed(5, 0, 2)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "DrivetrainEv_detectSlip_a", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "DrivetrainEv_detectSlip_a"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(5, 0, 2)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T DrivetrainEv_detectSlip_a(\
%assign comma = ""
%if SLibCG_ArgAccessed(5, 0, 0)
%<comma>real_T Tout\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(5, 0, 1)
%<comma>real_T Tfmaxs\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(5, 0, 2)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("DrivetrainEv_detectSlip_a", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>B_Clutch_DrivetrainEv_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(5, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function DrivetrainEv_detectLockup_o_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T b_yn;
%assign _modelSS = ""

%assign   Outputs_open_detectLockup_8_2 = ""
%openfile Outputs_open_detectLockup_8_2

/* Outputs for Function Call SubSystem: '<S157>/detectLockup' */
%closefile Outputs_open_detectLockup_8_2

%assign    Outputs_body_detectLockup_8_2 = ""
%openfile  Outputs_body_detectLockup_8_2

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[5], "Output",0)
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectLockup",5,0)
%<SLibCG_AccessArg(5 ,1, 3)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectLockup",5,1)
%<SLibCG_AccessArg(5 ,1, 0)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectLockup",5,2)
%<SLibCG_AccessArg(5 ,1, 1)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectLockup",5,3)
%<SLibCG_AccessArg(5 ,1, 4)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectLockup",5,4)
%<SLibCG_AccessArg(5 ,1, 2)>
%endif
%if SLibCG_SystemFcnArgAccessed("DrivetrainEv_detectLockup",5,5)
%<SLibCG_AccessArg(5 ,1, 5)>
%endif

%<SLibCG_DumpSSCode("/*@[84876*/",SLibCGIRGenReusableSysCall("DrivetrainEv_detectLockup", ["/*@>84bc9*/%<::tSimStruct>", "Tout", "Tfmaxs", "&/*@>84be9*/localB->/*@>84be8*/CombinatorialLogic", "/*@>84bf4*/rtp_br", "&/*@>84c00*/localDW->/*@>84bff*/detectLockup"], 5, 0, 6, 0, 6, 8),"/*@]*/")>\
%assign ss = ::CompiledModel.System[5]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif

%endif
%closefile Outputs_body_detectLockup_8_2

%assign    Outputs_close_detectLockup_8_2 = ""
%openfile  Outputs_close_detectLockup_8_2

/* End of Outputs for SubSystem: '<S157>/detectLockup' */
%closefile Outputs_close_detectLockup_8_2
%<SLibCG_DumpSSCode(Outputs_open_detectLockup_8_2, Outputs_body_detectLockup_8_2, Outputs_close_detectLockup_8_2)>

b_yn = localB->CombinatorialLogic;
return b_yn;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[5].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("DrivetrainEv_detectLockup_o", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "DrivetrainEv_detectLockup_o"))
%<SLibCG_AccessArg(5, 1, 3)>
%endif
%if SLibCG_ArgAccessed(5, 1, 3)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "DrivetrainEv_detectLockup_o", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "DrivetrainEv_detectLockup_o"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(5, 1, 3)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T DrivetrainEv_detectLockup_o(\
%assign comma = ""
%if SLibCG_ArgAccessed(5, 1, 0)
%<comma>real_T Tout\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(5, 1, 1)
%<comma>real_T Tfmaxs\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(5, 1, 2)
%<comma>real_T rtp_br\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(5, 1, 3)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("DrivetrainEv_detectLockup_o", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>B_Clutch_DrivetrainEv_T *localB\
%assign comma = ", "
%if SLibCG_ArgAccessed(5, 1, 5)
%<comma>DW_Clutch_DrivetrainEv_T *localDW\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(5, 1, fcnProtoType)>
%return fcnBuff
%endfunction

